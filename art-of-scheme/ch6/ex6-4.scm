(load "newton.scm")

(define num-prompt
    (lambda ()
        (display "Enter any number: ")
        (let ((n (read)))
            (cond
                ((eq? n 'stop)
                    (display "Dueces.")
                    (newline)
                )
                (else
                    (display "You entered ")
                    (display n)
                    (display " (whose square root is ")
                    (display (round-n-places 3 (square-root n)))
                    (display ", and square is ")
                    (display (expt n 2))
                    (display ")")
                    (newline)
                    (num-prompt)
                )
            )
        )
    )
)

(define change
    (lambda ()
        (letrec*
            (
                (display-change (lambda (count msg)
                    (display (round count))
                    (display " ")
                    (display msg)
                    (if (> count 1) (display "s"))
                    (newline)
                ))
                (compute-small-change (lambda (amt)
                    (cond
                        ((>= amt 25)
                            (display-change (quotient amt 25) "quarter")
                            (compute-small-change (remainder amt 25))
                        )
                        ((>= amt 10)
                            (display-change (quotient amt 10) "dime")
                            (compute-small-change (remainder amt 10))
                        )
                        ((>= amt 5)
                            (display-change (quotient amt 5) "nickel")
                            (compute-small-change (remainder amt 5))
                        )
                        ((>= amt 1)
                            (display-change amt (if (> amt 1) "pennie" "penny"))
                            (newline)
                        )
                        (else
                            (newline)
                        )
                    )
                ))
                (compute-change (lambda (amt small-change)
                    (cond
                        ((>= amt 100)
                            (display-change (quotient amt 100) "100-dollar bill")
                            (compute-change (remainder amt 100) small-change)
                        )
                        ((>= amt 20)
                            (display-change (quotient amt 20) "20-dollar bill")
                            (compute-change (remainder amt 20) small-change)
                        )
                        ((>= amt 10)
                            (display-change (quotient amt 10) "10-dollar bill")
                            (compute-change (remainder amt 10) small-change)
                        )
                        ((>= amt 5)
                            (display-change (quotient amt 5) "5-dollar bill")
                            (compute-change (remainder amt 5) small-change)
                        )
                        ((>= amt 1)
                            (display-change amt "1-dollar bill")
                            (compute-small-change small-change)
                        )
                        (else
                            (compute-small-change small-change)
                        )
                    )
                ))
                (make-change (lambda (inv-count)
                    (display (if (zero? inv-count)
                        "For what amount of money do you want change? $"
                        "Do you want to enter another amount? (enter 'no' to exit) $"
                    ))
                    (let
                        ((amount (read)))

                        (cond
                            ((eq? amount 'no) (newline))
                            (else
                                (letrec*
                                    (
                                        (rounded-amt (exact (floor amount)))
                                        (small-change (exact (round (* 100 (- amount rounded-amt)))))
                                    )

                                    (compute-change rounded-amt small-change)
                                    (make-change (1+ inv-count))
                                )
                            )
                        )
                    )
                ))
            )
            (make-change 0)
        )
    )
)

(define days-of-the-week '(Sunday Monday Tuesday Wednesday Thursday Friday Saturday))
