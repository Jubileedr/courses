(load "ch12/circular-list.scm")

(define pump-maker
    (lambda (extra-time pump-rate service)
        (let ((q (queue-maker)))
            (let
                (
                    (increment (lambda ()
                    (let ((gallons (send (send q 'front) 'gallons)))
                        (ceiling (+ extra-time (/ gallons pump-rate)))
                    )))
                    (timer (box-maker -1))
                )
                (lambda msg
                    (case (1st msg)
                        ((type) "pump")
                        ((check) (if (not (send q 'empty?))
                            (let ((c (send timer 'show)))
                                (cond
                                    ((negative? c) (send timer 'update! (increment)))
                                    ((zero? c) (let ((customer (send q 'front)))
                                        (send q 'dequeue!)
                                        (send customer 'record service)
                                        (if (send q 'empty?)
                                            (send timer 'reset!)
                                            (send timer 'update! (increment))
                                        )
                                    ))
                                    (else (send timer 'update! (1- (send timer 'show))))
                                )
                            )
                        ))
                        (else (delegate q msg))
                    )
                )
            )
        )
    )
)
